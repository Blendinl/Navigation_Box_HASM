#!/bin/bash
# Copyright (C) 2020 by NavInfo Europe B.V. The Netherlands - All rights reserved
# Information classification: Confidential
# This content is protected by international copyright laws.
# Reproduction and distribution is prohibited without written permission.

# Exit on errors and undefined variables
set -euo pipefail


# Define function that checks if an array contains a given value
array_contains()
{
  local array="$1[@]"
  local seeking=$2

  local contains=1
  for element in "${!array}"; do
    if [[ $element == "$seeking" ]]; then
      contains=0
      break
    fi
  done

  return $contains
}


# Define docker options that do _not_ take a value (Except --help)
docker_simple_args=("-d" \
                    "--detach" \
                    "--disable-content-trust" \
                    "--init" \
                    "-i" \
                    "--interactive" \
                    "--no-healthcheck" \
                    "--oom-kill-disable" \
                    "--privileged" \
                    "-P" \
                    "--publish-all" \
                    "--read-only" \
                    "--rm" \
                    "--sig-proxy" \
                    "-t" \
                    "--tty")

# Parse docker options and command
OPTS=()
CMD=()
while [[ $# -gt 0 ]]
do
  case "$1" in
    # Check if help is requested
    -h|--help)
      echo "Usage: $0 [docker_run_options] [command]"
      echo
      echo "To run a bash shell in the docker container run $0 without any command"
      exit 2;;

    # Parse equals separated docker options
    -*=*)
       OPTS+=("$1")
       shift;;

    # Parse space separated docker options
    -*)
      if array_contains docker_simple_args "$1"; then
         OPTS+=("$1")
      else
         OPTS+=("$1=$2")
         shift
      fi
      shift;;

    # If positional option is encountered, parse version first, then treat remaining options as command
    *)
      CMD=($@)
      break;;
  esac
done

# Use the nVidia docker runtime if it is available
if [[ $(docker info 2> /dev/null | grep Runtimes) == *nvidia* ]] ; then
  OPTS+=("--runtime=nvidia")
fi

# Set hostname 'docker'
OPTS+=("--hostname=docker")

# Mimic the current host user in the container
OPTS+=("--env=USER_NAME=$USER")
OPTS+=("--env=USER_GID=$(id -g)")
OPTS+=("--env=USER_UID=$(id -u)")

# Define location of the X11 domain socket
XSOCK="/tmp/.X11-unix"

# Define location of the X11 authority
XAUTH="$XAUTHORITY"
# NOTE: The X11 authority of the current user is forwarded; alternatively, we could create a new X11 authority
#XAUTH="/tmp/.docker.xauth"

# Allow GUI to open in the X server of the host
OPTS+=("--env=DISPLAY")
OPTS+=("--env=XAUTHORITY=$XAUTH")
OPTS+=("--volume=$XSOCK:$XSOCK")
OPTS+=("--volume=$XAUTH:$XAUTH:rw")

# Allow access to the video cards / GPUs of the host
# NOTE: For newer versions of Docker this can probably be replaced by --gpus=all flag
while read -r DEVICE ; do
  OPTS+=("--device=$DEVICE")
done < <(find /dev/dri /dev/nvidia* /dev/vga_arbiter -maxdepth 0 2> /dev/null ||:)

# Provide a terminal when no command is given
OPTS+=("--interactive")
OPTS+=("--tty")

# Cleanup container after run
OPTS+=("--rm")

# Define image
IMAGE="nvcr.io/navinfo/nie_deliveries/lidar_slam:20.05"


# Run docker container with the specified options and command
#set -x
docker run ${OPTS[@]} $IMAGE ${CMD[@]}
